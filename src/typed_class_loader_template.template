#ifndef TYPED_CLASS_LOADER_TEMPLATE_H_DEFINED
#define TYPED_CLASS_LOADER_TEMPLATE_H_DEFINED

#include <ros/console.h>
#include <pluginlib/class_loader.h>
#include <vector>
#include <string>
#include <iostream>

template <class $>
class TypedClassLoader
{
  public:
    ClassLoader(std::string package_name) :
    class_loader_(package_name, "$")
    {
    }
    
    std::vector<std::string> availablePlugins()
    {
      return(class_loader_.getAvailableClasses());    
    }
    
    bool loadPlugin(std::string class_name)
    {
      try
      {
        class_loader_.createInstance(class_name);      
        return true;
      }
      catch(...)
      {
        return false;
      }
    }
    
    string whereIsPluginLocated(std::string class_name)
    {
      try
      {
        return class_loader_.getClassLibraryPath();
      }
      catch(...)
      {
        return ("Could not find location of plugin " + class_name);
      }
    }
  
  private:
    pluginlib::ClassLoader<$> class_loader_;
    
}


#endif

